class ImageClassifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv_layer_1 = nn.Sequential(
          nn.Conv2d(3, 16, 3, padding=0),
          nn.ReLU(),
          nn.MaxPool2d(2))
        self.conv_layer_2 = nn.Sequential(
          nn.Conv2d(8, 16, 3, padding=0),
          nn.ReLU())
          #nn.MaxPool2d(2))
        self.classifier = nn.Sequential(
          nn.Flatten(),
          nn.Linear(in_features=16*31*31, out_features=64),
          nn.ReLU(),
          nn.Dropout(0.5),
          nn.Linear(in_features=64, out_features=5))
          #nn.Softmax(dim=1))
    def forward(self, x: torch.Tensor):
        x = self.conv_layer_1(x)
        #x = self.conv_layer_2(x)
        x = self.classifier(x)
        return x